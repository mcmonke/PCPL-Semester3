from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
from aiogram.filters import Command
from openai import OpenAI
import asyncio
import json

# –¢–æ–∫–µ–Ω—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, OpenAI, –∞ —Ç–∞–∫ –∂–µ –∏–º—è json —Ñ–∞–π–ª–∞
API_TOKEN = ' tg bot api '
OPENAI_API_KEY = ' OpenAI ChatGPT api '
CHAT_DATA_FILE = 'active_chats.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id –∏–∑ —Ñ–∞–π–ª–∞
def load_active_chats():
    try:
        with open(CHAT_DATA_FILE, 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –≤ —Ñ–∞–π–ª
def save_active_chats():
    with open(CHAT_DATA_FILE, 'w') as f:
        json.dump(list(active_chats), f)

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç chat_id –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
active_chats = load_active_chats()

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ
async def generate_recipe(prompt, model="gpt-3.5-turbo", message=None):
    print("[INFO] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API.\n")
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.7,
        )
        recipe = response.choices[0].message.content.strip()
        print("[SUCCESS] –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é OpenAI API.\n")
        return recipe
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", e, "\n")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# –ì—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RecipeStates(StatesGroup):
    ModelChoice = State()
    Category = State()
    Taste = State()
    Texture = State()
    Aroma = State()
    Additional = State()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def set_default_commands():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@router.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def handle_start_button(message: types.Message):
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_welcome(message)

# –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]],
        resize_keyboard=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def reset_keyboards_on_startup():
    for chat_id in active_chats:
        try:
            await bot.send_message(
                chat_id,
                text="–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_start_keyboard()
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤ –±–æ—Ç–µ
@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    active_chats.add(message.chat.id)
    save_active_chats()
    print("[START] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π")]],
        resize_keyboard=True
    )
    await message.answer(
        "üë®‚Äçüç≥ –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n"
        "üìù –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –Ω–æ–≤–æ–µ –±–ª—é–¥–æ.\n"
        "üëâ –£—á—Ç–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=keyboard
        )
    print("[INFO] –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=['help']))
async def send_help(message: types.Message, state: FSMContext):
    print("[HELP] –ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    await state.update_data(previous_state=current_state)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ
    
    help_text = (
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–º–æ—â—å\n"
        "/info ‚Äî –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã. "
        "–°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(help_text, reply_markup=keyboard)
    print("[INFO] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@router.message(Command(commands=['info']))
async def send_info(message: types.Message, state: FSMContext):
    print("[INFO] –ö–æ–º–∞–Ω–¥–∞ /info –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    await state.update_data(previous_state=current_state)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ
    
    info_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. "
        "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞, –≤–∫—É—Å, —Ç–µ–∫—Å—Ç—É—Ä—É, –∞—Ä–æ–º–∞—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è. "
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. "
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(info_text, reply_markup=keyboard)
    print("[INFO] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    print("[BACK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    previous_state = data.get("previous_state")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if previous_state:
        await state.set_state(previous_state)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        if previous_state == RecipeStates.ModelChoice.state:
            await choose_model(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        elif previous_state == RecipeStates.Category.state:
            await process_category(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif previous_state == RecipeStates.Taste.state:
            await process_taste(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∫—É—Å–∞
        elif previous_state == RecipeStates.Texture.state:
            await process_texture(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É—Ä—ã
        elif previous_state == RecipeStates.Aroma.state:
            await process_aroma(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞—Ä–æ–º–∞—Ç–∞
        elif previous_state == RecipeStates.Additional.state:
            await process_additional(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º

    else:
        await message.answer("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π" –≤ –±–æ—Ç–µ
@router.message(lambda message: message.text == "–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–≤–∞–π")
async def choose_model(message: types.Message, state: FSMContext):
    print("[STEP] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏.\n")
    buttons = [
        [KeyboardButton(text="gpt-3.5-turbo")],
        [KeyboardButton(text="gpt-4")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await state.set_state(RecipeStates.ModelChoice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", reply_markup=keyboard)
    print("[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞
@router.message(RecipeStates.ModelChoice)
async def set_model_and_start(message: types.Message, state: FSMContext):
    chosen_model = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if chosen_model not in ["gpt-3.5-turbo", "gpt-4"]:
        data = await state.get_data()
        chosen_model = data.get("model", "gpt-3.5-turbo")  #–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print(f"[INFO] –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {chosen_model}\n")
    else:
        print(f"[SELECTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: {chosen_model}\n")

    await state.update_data(model=chosen_model)

    buttons = [
        [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ")],
        [KeyboardButton(text="–ó–∞–∫—É—Å–∫–∞")],
        [KeyboardButton(text="–î–µ—Å–µ—Ä—Ç")],
        [KeyboardButton(text="–ù–∞–ø–∏—Ç–æ–∫")],
        [KeyboardButton(text="–°–∞–ª–∞—Ç")],
        [KeyboardButton(text="–°—É–ø")],
        [KeyboardButton(text="–°–æ—É—Å")],
        [KeyboardButton(text="–ì–∞—Ä–Ω–∏—Ä")],
        [KeyboardButton(text="–í—ã–ø–µ—á–∫–∞")],
        [KeyboardButton(text="–ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")],
        [KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await state.set_state(RecipeStates.Category)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π", reply_markup=keyboard)
    print("[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≤—ã–±–æ—Ä –≤–∫—É—Å–∞ –±–ª—é–¥–∞
@router.message(RecipeStates.Category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text == "–í –Ω–∞—á–∞–ª–æ":
        print("[ACTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É.\n")
        await send_welcome(message)
        return

    category = message.text
    await state.update_data(category=category)
    print(f"[CATEGORY SELECTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞: {category}\n")

    if category == "–ù–∞–ø–∏—Ç–æ–∫":
        print("[INFO] –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ù–∞–ø–∏—Ç–æ–∫' –≤—ã–±—Ä–∞–Ω–∞ - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞—Ä–æ–º–∞—Ç–∞.\n")
        await state.set_state(RecipeStates.Aroma)
        await ask_aroma(message)
    else:
        buttons = [
            [KeyboardButton(text="–°–ª–∞–¥–∫–∏–π"), KeyboardButton(text="–°–æ–ª—ë–Ω—ã–π")],
            [KeyboardButton(text="–ö–∏—Å–ª—ã–π"), KeyboardButton(text="–ì–æ—Ä—å–∫–∏–π")],
            [KeyboardButton(text="–£–º–∞–º–∏"), KeyboardButton(text="–û—Å—Ç—Ä—ã–π")],
            [KeyboardButton(text="–ü—Ä—è–Ω—ã–π"), KeyboardButton(text="–¢–µ—Ä–ø–∫–∏–π")],
            [KeyboardButton(text="–°–≤–µ–∂–∏–π"), KeyboardButton(text="–ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")],
            [KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await state.set_state(RecipeStates.Taste)
        await message.answer("–ö–∞–∫–∏–µ –≤–∫—É—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π", reply_markup=keyboard)
        print("[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –≤–∫—É—Å–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∫—É—Å–∞ –±–ª—é–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã
@router.message(RecipeStates.Taste)
async def process_taste(message: types.Message, state: FSMContext):
    if message.text == "–í –Ω–∞—á–∞–ª–æ":
        print("[ACTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É.\n")
        await send_welcome(message)
        return

    await state.update_data(taste=message.text)
    print(f"[TASTE SELECTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∫—É—Å: {message.text}\n")
    category = (await state.get_data()).get("category")

    if category == "–î–µ—Å–µ—Ä—Ç" or category == "–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ":
        buttons = [
            [KeyboardButton(text="–•—Ä—É—Å—Ç—è—â–∏–π"), KeyboardButton(text="–ù–µ–∂–Ω—ã–π")],
            [KeyboardButton(text="–ú—è–≥–∫–∏–π"), KeyboardButton(text="–ü–ª–æ—Ç–Ω—ã–π")],
            [KeyboardButton(text="–í–æ–∑–¥—É—à–Ω—ã–π"), KeyboardButton(text="–ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π")],
            [KeyboardButton(text="–ö—Ä–µ–º–æ–≤—ã–π"), KeyboardButton(text="–°–æ—á–Ω—ã–π")],
            [KeyboardButton(text="–¢—è–≥—É—á–∏–π"), KeyboardButton(text="–•–ª–æ–ø—å–µ–≤–∏–¥–Ω—ã–π")],
            [KeyboardButton(text="–ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"), KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await state.set_state(RecipeStates.Texture)
        await message.answer("–ö–∞–∫–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –±–ª—é–¥–∞ –≤–∞–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π", reply_markup=keyboard)
        print("[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –±–ª—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")
    else:
        print("[INFO] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞—Ä–æ–º–∞—Ç–∞.\n")
        await state.set_state(RecipeStates.Aroma)
        await ask_aroma(message)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≤—ã–±–æ—Ä –∞—Ä–æ–º–∞—Ç–∞
@router.message(RecipeStates.Texture)
async def process_texture(message: types.Message, state: FSMContext):
    if message.text == "–í –Ω–∞—á–∞–ª–æ":
        print("[ACTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É.\n")
        await send_welcome(message)
        return

    await state.update_data(texture=message.text)
    print(f"[TEXTURE SELECTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–∫—Å—Ç—É—Ä—É: {message.text}\n")
    await state.set_state(RecipeStates.Aroma)
    await ask_aroma(message)

async def ask_aroma(message: types.Message):
    buttons = [
        [KeyboardButton(text="–ü—Ä—è–Ω—ã–π"), KeyboardButton(text="–¢—Ä–∞–≤—è–Ω–æ–π")],
        [KeyboardButton(text="–¶–∏—Ç—Ä—É—Å–æ–≤—ã–π"), KeyboardButton(text="–°–ª–∞–¥–∫–∏–π")],
        [KeyboardButton(text="–ö–æ–ø—á–µ–Ω—ã–π"), KeyboardButton(text="–û—Ä–µ—Ö–æ–≤—ã–π")],
        [KeyboardButton(text="–ú–æ–ª–æ—á–Ω—ã–π"), KeyboardButton(text="–§—Ä—É–∫—Ç–æ–≤—ã–π")],
        [KeyboardButton(text="–ó–µ–º–ª–∏—Å—Ç—ã–π"), KeyboardButton(text="–û—Å—Ç—Ä—ã–π")],
        [KeyboardButton(text="–ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"), KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –±–ª—é–¥–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π", reply_markup=keyboard)
    print("[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –∞—Ä–æ–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—Ä–æ–º–∞—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≤—ã–±–æ—Ä –¥–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏–π
@router.message(RecipeStates.Aroma)
async def process_aroma(message: types.Message, state: FSMContext):
    if message.text == "–í –Ω–∞—á–∞–ª–æ":
        print("[ACTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É.\n")
        await send_welcome(message)
        return

    await state.update_data(aroma=message.text)
    print(f"[AROMA SELECTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—Ä–æ–º–∞—Ç: {message.text}\n")
    buttons = [
        [KeyboardButton(text="–õ—ë–≥–∫–æ–µ"), KeyboardButton(text="–°—ã—Ç–Ω–æ–µ")],
        [KeyboardButton(text="–ù–µ–æ–±—ã—á–Ω–æ–µ"), KeyboardButton(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ")],
        [KeyboardButton(text="–ü–æ–ª–µ–∑–Ω–æ–µ"), KeyboardButton(text="–ë—ã—Å—Ç—Ä–æ–µ –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏")],
        [KeyboardButton(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç"), KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await state.set_state(RecipeStates.Additional)
    await message.answer("–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –±–ª—é–¥—É? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π", reply_markup=keyboard)
    print("[INFO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
@router.message(RecipeStates.Additional)
async def process_additional(message: types.Message, state: FSMContext):
    if message.text == "–í –Ω–∞—á–∞–ª–æ":
        print("[ACTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É.\n")
        await send_welcome(message)
        return

    if message.text == "–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏":
        print("[ACTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏.\n")
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        chosen_model = data.get("model", "gpt-3.5-turbo")
        if chosen_model not in ["gpt-3.5-turbo", "gpt-4"]:
            chosen_model = "gpt-3.5-turbo"  # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
        await state.update_data(model=chosen_model)
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞, –º–æ–¥–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π
        await set_model_and_start(message, state)
        return

    update_additional = message.text != "–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –±–ª—é–¥–æ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
    if update_additional:
        await state.update_data(additional=message.text)

    data = await state.get_data()
    print("[INFO] –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞...\n")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å —Ä–µ—Ü–µ–ø—Ç. "
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª—é–¥–∞: {data['category']}. "
        f"–ñ–µ–ª–∞–µ–º—ã–π –≤–∫—É—Å: {data.get('taste', '–Ω–µ —É–∫–∞–∑–∞–Ω')}. "
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞: {data.get('texture', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}. "
        f"–ê—Ä–æ–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–ª—É—á–∏—Ç—å: {data['aroma']}. "
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –±–ª—é–¥—É: {data['additional']}. "
        f"–í –æ–¥–Ω–æ–º —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç! "
    )

    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=types.ReplyKeyboardRemove())
    model = data.get('model', "gpt-3.5-turbo")  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    try:
        recipe = await generate_recipe(prompt, model=model, message=message)
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:", e, "\n")
        recipe = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    print(f"[INFO] –†–µ—Ü–µ–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ {model}. \n\n[PROMPT] –ü—Ä–æ–º–ø—Ç:\n\n{prompt} \n\n[RESULT] –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{recipe}\n\n")

    await message.answer(recipe)
    print("[INFO] –†–µ—Ü–µ–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –±–ª—é–¥–æ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")],
            [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏")],
            [KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard)


async def main():
    await set_default_commands()
    print("[BOOT] –ö–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n")
    await reset_keyboards_on_startup()
    print("[BOOT] –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n")
    print("[BOOT] –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n")
    await dp.start_polling(bot)

if __name__ == '__main__':
    print("\n[BOOT] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n")
    asyncio.run(main())
